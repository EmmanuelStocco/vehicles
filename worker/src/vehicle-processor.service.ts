import { Injectable, Logger } from '@nestjs/common';
import { EventPattern, Payload } from '@nestjs/microservices';

/**
 * Worker respons√°vel por processar eventos de ve√≠culos recebidos via RabbitMQ
 * Implementa padr√£o Event-Driven Architecture para processamento ass√≠ncrono
 */
@Injectable()
export class VehicleProcessorService {
  private readonly logger = new Logger(VehicleProcessorService.name);

  /**
   * Processa eventos de cria√ß√£o de ve√≠culos
   * Recebe dados completos do ve√≠culo criado
   */
  @EventPattern('vehicle_created')
  async handleVehicleCreated(@Payload() data: any) {
    this.logger.log(`üì• Processando requisi√ß√£o via RabbitMQ - Novo ve√≠culo criado (ID: ${data.id})`); 
    
    await this.simulateProcessing('CREATE', data);
  }

  /**
   * Processa eventos de atualiza√ß√£o de ve√≠culos
   * Recebe dados atualizados do ve√≠culo
   */
  @EventPattern('vehicle_updated')
  async handleVehicleUpdated(@Payload() data: any) {
    this.logger.log(`üì• Processando requisi√ß√£o via RabbitMQ - Ve√≠culo atualizado (ID: ${data.id})`);
    
    await this.simulateProcessing('UPDATE', data);
  }

  /**
   * Processa eventos de exclus√£o de ve√≠culos
   * Recebe apenas o ID do ve√≠culo deletado
   */
  @EventPattern('vehicle_deleted')
  async handleVehicleDeleted(@Payload() data: any) {
    this.logger.log(`üì• Processando requisi√ß√£o via RabbitMQ - Ve√≠culo deletado (ID: ${data.id})`);
    
    await this.simulateProcessing('DELETE', data);
  }

  /**
   * Simula processamento ass√≠ncrono de eventos 
   */
  private async simulateProcessing(action: string, data: any) {
    return new Promise(resolve => {
      setTimeout(() => {
        this.logger.log(`‚úÖ Processamento conclu√≠do - A√ß√£o: ${action} | Ve√≠culo ID: ${data.id}`);
        
        // Ideias para implementa√ß√£o:
        // - Enviar notifica√ß√µes por email para administradores
        // - Atualizar cache Redis com dados atualizados
        // - Gerar relat√≥rios de auditoria
        // - Integrar com sistemas externos (CRM, ERP, etc.)
        // - Enviar dados para data warehouse
        // - Processar regras de neg√≥cio espec√≠ficas
        
        resolve(true);
      }, 1000);
    });
  }
}
